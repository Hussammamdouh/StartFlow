openapi: 3.0.0
info:
  title: StartFlow API Documentation
  version: 1.0.0
  description: |
    API documentation for StartFlow application
    
    ## AI Features
    StartFlow includes powerful AI-powered features for startup ecosystem analysis:
    
    - **Company Recommendations**: Get intelligent company recommendations based on industry
    - **Startup Success Prediction**: Predict startup success probability using machine learning
    - **Profit Prediction**: Forecast profit based on spending allocation
    
    ## Authentication
    Most endpoints require JWT authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    API requests are limited to 100 requests per 15 minutes per IP address.
    
    ## Error Handling
    All endpoints return consistent error responses with appropriate HTTP status codes.
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.startflow.com
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # AI Schemas
    IndustryInput:
      type: object
      required:
        - industry
      properties:
        industry:
          type: string
          description: Industry to get recommendations for
          example: "Fintech"
          minLength: 1
          maxLength: 100
        top_n:
          type: integer
          description: Number of recommendations to return
          minimum: 1
          maximum: 20
          default: 6
          example: 6
    
    StartupSuccessInput:
      type: object
      required:
        - funding_total_usd
        - milestones
        - has_VC
        - has_angel
        - has_roundA
        - has_roundB
        - has_roundC
        - has_roundD
        - avg_participants
        - is_CA
        - is_NY
        - is_MA
        - is_TX
        - is_otherstate
        - age_first_funding_years
      properties:
        funding_total_usd:
          type: number
          description: Total funding in USD
          minimum: 0
          example: 1000000
        milestones:
          type: integer
          description: Number of milestones achieved
          minimum: 0
          maximum: 100
          example: 5
        has_VC:
          type: integer
          enum: [0, 1]
          description: Has venture capital backing (0 = No, 1 = Yes)
          example: 1
        has_angel:
          type: integer
          enum: [0, 1]
          description: Has angel investor backing (0 = No, 1 = Yes)
          example: 1
        has_roundA:
          type: integer
          enum: [0, 1]
          description: Has completed Series A (0 = No, 1 = Yes)
          example: 1
        has_roundB:
          type: integer
          enum: [0, 1]
          description: Has completed Series B (0 = No, 1 = Yes)
          example: 0
        has_roundC:
          type: integer
          enum: [0, 1]
          description: Has completed Series C (0 = No, 1 = Yes)
          example: 0
        has_roundD:
          type: integer
          enum: [0, 1]
          description: Has completed Series D (0 = No, 1 = Yes)
          example: 0
        avg_participants:
          type: number
          description: Average number of participants in funding rounds
          minimum: 0
          maximum: 50
          example: 3.5
        is_CA:
          type: integer
          enum: [0, 1]
          description: Is located in California (0 = No, 1 = Yes)
          example: 1
        is_NY:
          type: integer
          enum: [0, 1]
          description: Is located in New York (0 = No, 1 = Yes)
          example: 0
        is_MA:
          type: integer
          enum: [0, 1]
          description: Is located in Massachusetts (0 = No, 1 = Yes)
          example: 0
        is_TX:
          type: integer
          enum: [0, 1]
          description: Is located in Texas (0 = No, 1 = Yes)
          example: 0
        is_otherstate:
          type: integer
          enum: [0, 1]
          description: Is located in other states (0 = No, 1 = Yes)
          example: 0
        age_first_funding_years:
          type: number
          description: Age at first funding in years
          minimum: 0
          maximum: 50
          example: 2.5
    
    ProfitPredictionInput:
      type: object
      required:
        - RnD_Spend
        - Administration
        - Marketing_Spend
      properties:
        RnD_Spend:
          type: number
          description: Research and Development spending in USD
          minimum: 0
          example: 500000
        Administration:
          type: number
          description: Administrative spending in USD
          minimum: 0
          example: 200000
        Marketing_Spend:
          type: number
          description: Marketing spending in USD
          minimum: 0
          example: 300000
    
    # AI Response Schemas
    CompanyRecommendation:
      type: object
      properties:
        Company Name:
          type: string
          description: Name of the recommended company
          example: "Fawry"
        Industry:
          type: string
          description: Industry of the company
          example: "Digital Payments"
        Funding Amount:
          type: string
          description: Total funding amount
          example: "470 million"
        Market Size:
          type: string
          description: Market size category
          enum: [Small, Medium, Large]
          example: "Large"
    
    RecommendationsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Found 6 recommendations for Fintech"
        data:
          type: object
          properties:
            industry:
              type: string
              example: "Fintech"
            recommendations:
              type: array
              items:
                $ref: '#/components/schemas/CompanyRecommendation'
            count:
              type: integer
              example: 6
            timestamp:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00.000Z"
    
    StartupSuccessPrediction:
      type: object
      properties:
        success_prediction:
          type: integer
          enum: [0, 1]
          description: "0 = Likely to fail, 1 = Likely to succeed"
          example: 1
        success_probability:
          type: number
          minimum: 0
          maximum: 1
          description: Probability of success (0.0 to 1.0)
          example: 0.85
        failure_probability:
          type: number
          minimum: 0
          maximum: 1
          description: Probability of failure (0.0 to 1.0)
          example: 0.15
    
    StartupSuccessInterpretation:
      type: object
      properties:
        success_likely:
          type: boolean
          description: Whether success is likely based on prediction
          example: true
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Confidence level of the prediction
          example: 0.85
        risk_level:
          type: string
          enum: [Low, Medium, High]
          description: Risk level assessment
          example: "Low"
    
    StartupSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Startup success prediction completed"
        data:
          type: object
          properties:
            prediction:
              $ref: '#/components/schemas/StartupSuccessPrediction'
            interpretation:
              $ref: '#/components/schemas/StartupSuccessInterpretation'
            timestamp:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00.000Z"
    
    ProfitPrediction:
      type: object
      properties:
        predicted_profit:
          type: number
          description: Predicted profit in USD
          example: 750000
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Confidence level of the prediction
          example: 0.85
        currency:
          type: string
          description: Currency of the prediction
          example: "USD"
    
    SpendingInsights:
      type: object
      properties:
        total_spending:
          type: number
          description: Total spending amount
          example: 1000000
        spending_breakdown:
          type: object
          properties:
            rnd_percentage:
              type: number
              description: Percentage spent on R&D
              example: 50.0
            admin_percentage:
              type: number
              description: Percentage spent on administration
              example: 20.0
            marketing_percentage:
              type: number
              description: Percentage spent on marketing
              example: 30.0
        recommendations:
          type: array
          items:
            type: string
          description: Spending optimization recommendations
          example: ["Consider increasing R&D spending for better innovation potential"]
    
    ProfitPredictionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Profit prediction completed"
        data:
          type: object
          properties:
            prediction:
              $ref: '#/components/schemas/ProfitPrediction'
            insights:
              $ref: '#/components/schemas/SpendingInsights'
            timestamp:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00.000Z"
    
    AIHealthStatus:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: string
          enum: [healthy, unhealthy]
          example: "healthy"
        data:
          type: object
          properties:
            service:
              type: string
              example: "StartFlow AI API"
            version:
              type: string
              example: "1.0.0"
            modelsLoaded:
              type: object
              properties:
                recommendation:
                  type: boolean
                  example: true
                startup_success:
                  type: boolean
                  example: true
                profit_prediction:
                  type: boolean
                  example: true
            timestamp:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00.000Z"
    
    AIStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            service:
              type: string
              example: "StartFlow AI Integration"
            backend:
              type: object
              properties:
                status:
                  type: string
                  example: "healthy"
                port:
                  type: integer
                  example: 3000
                environment:
                  type: string
                  example: "development"
            ai_service:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, unhealthy]
                  example: "healthy"
                url:
                  type: string
                  example: "http://localhost:8000"
                health:
                  type: object
                info:
                  type: object
            features:
              type: object
              properties:
                recommendations:
                  type: string
                  example: "Company recommendations based on industry"
                startup_success:
                  type: string
                  example: "Startup success probability prediction"
                profit_prediction:
                  type: string
                  example: "Profit prediction based on spending allocation"
            timestamp:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00.000Z"
    
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
          example: "Invalid input provided"
        details:
          type: string
          description: Additional error details (optional)
          example: "Connection refused"
    
    # Existing schemas continue here...
    User:
      type: object
      properties:
        uid:
          type: string
          description: Unique user identifier
          example: "user123"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        firstName:
          type: string
          description: User's first name
          example: "John"
        lastName:
          type: string
          description: User's last name
          example: "Doe"
        phone:
          type: string
          description: User's phone number
          example: "+1234567890"
        role:
          type: string
          enum: [user, businessOwner, fundingEntity, admin]
          description: User's role in the system
          example: "businessOwner"
        status:
          type: string
          enum: [pending, approved, rejected]
          description: User's account status
          example: "approved"
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00.000Z"
        
        # Business Owner specific fields
        businessName:
          type: string
          description: Business name (businessOwner role only)
          example: "TechStart Inc."
        businessOwnerName:
          type: string
          description: Business owner's full name (businessOwner role only)
          example: "John Doe"
        idNumber:
          type: string
          description: Business ID number (businessOwner role only)
          example: "BUS123456"
        idPhoto:
          type: string
          description: ID photo URL (businessOwner role only)
          example: "https://example.com/id-photo.jpg"
        teamSize:
          type: integer
          minimum: 1
          description: Number of team members (businessOwner role only)
          example: 10
        taxRegister:
          type: string
          description: Tax registration number (businessOwner role only)
          example: "TAX789012"
        businessEmail:
          type: string
          format: email
          description: Business email address (businessOwner role only)
          example: "contact@techstart.com"
        businessPhone:
          type: string
          description: Business phone number (businessOwner role only)
          example: "+1234567890"
        businessLocation:
          type: string
          description: Business location (businessOwner role only)
          example: "San Francisco, CA"
        businessIndustry:
          type: string
          description: Business industry (businessOwner role only)
          example: "Technology"
        fundingRounds:
          type: integer
          minimum: 0
          description: Number of funding rounds completed (businessOwner role only)
          example: 2
        fundingTotal:
          type: string
          description: Total funding received (businessOwner role only)
          example: "1.5M"
        
        # Funding Entity specific fields
        fundingEntityName:
          type: string
          description: Funding entity name (fundingEntity role only)
          example: "Venture Capital Fund"
        fundingEntityResponsibleName:
          type: string
          description: Responsible person's name (fundingEntity role only)
          example: "Jane Smith"
        fundingEntityPhone:
          type: string
          description: Funding entity phone number (fundingEntity role only)
          example: "+1234567890"
        fundingEntityEmail:
          type: string
          format: email
          description: Funding entity email (fundingEntity role only)
          example: "contact@vcfund.com"
        fundingTaxRegister:
          type: string
          description: Funding entity tax registration (fundingEntity role only)
          example: "FUND456789"
        fundingLocation:
          type: string
          description: Funding entity location (fundingEntity role only)
          example: "New York, NY"
        fundingPreferences:
          type: string
          description: Funding preferences and criteria (fundingEntity role only)
          example: "Early-stage tech startups, Series A and B"

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - phone
        - role
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        password:
          type: string
          minLength: 8
          description: User's password (minimum 8 characters)
          example: "securePassword123"
        firstName:
          type: string
          description: User's first name
          example: "John"
        lastName:
          type: string
          description: User's last name
          example: "Doe"
        phone:
          type: string
          pattern: "^\\+?[1-9]\\d{1,14}$"
          description: User's phone number
          example: "+1234567890"
        role:
          type: string
          enum: [user, businessOwner, fundingEntity, admin]
          description: User's role in the system
          example: "businessOwner"
        
        # Business Owner specific fields
        businessName:
          type: string
          description: Business name (required for businessOwner role)
          example: "TechStart Inc."
        businessOwnerName:
          type: string
          description: Business owner's full name (required for businessOwner role)
          example: "John Doe"
        idNumber:
          type: string
          description: Business ID number (required for businessOwner role)
          example: "BUS123456"
        idPhoto:
          type: string
          description: ID photo URL (optional for businessOwner role)
          example: "https://example.com/id-photo.jpg"
        teamSize:
          type: integer
          minimum: 1
          description: Number of team members (required for businessOwner role)
          example: 10
        taxRegister:
          type: string
          description: Tax registration number (required for businessOwner role)
          example: "TAX789012"
        businessEmail:
          type: string
          format: email
          description: Business email address (required for businessOwner role)
          example: "contact@techstart.com"
        businessPhone:
          type: string
          pattern: "^\\+?[1-9]\\d{1,14}$"
          description: Business phone number (required for businessOwner role)
          example: "+1234567890"
        businessLocation:
          type: string
          description: Business location (required for businessOwner role)
          example: "San Francisco, CA"
        businessIndustry:
          type: string
          description: Business industry (required for businessOwner role)
          example: "Technology"
        fundingRounds:
          type: integer
          minimum: 0
          default: 0
          description: Number of funding rounds completed (optional for businessOwner role)
          example: 2
        fundingTotal:
          type: string
          default: "0"
          description: Total funding received (optional for businessOwner role)
          example: "1.5M"
        
        # Funding Entity specific fields
        fundingEntityName:
          type: string
          description: Funding entity name (required for fundingEntity role)
          example: "Venture Capital Fund"
        fundingEntityResponsibleName:
          type: string
          description: Responsible person's name (required for fundingEntity role)
          example: "Jane Smith"
        fundingEntityPhone:
          type: string
          pattern: "^\\+?[1-9]\\d{1,14}$"
          description: Funding entity phone number (required for fundingEntity role)
          example: "+1234567890"
        fundingEntityEmail:
          type: string
          format: email
          description: Funding entity email (required for fundingEntity role)
          example: "contact@vcfund.com"
        fundingTaxRegister:
          type: string
          description: Funding entity tax registration (required for fundingEntity role)
          example: "FUND456789"
        fundingLocation:
          type: string
          description: Funding entity location (required for fundingEntity role)
          example: "New York, NY"
        fundingPreferences:
          type: string
          description: Funding preferences and criteria (optional for fundingEntity role)
          example: "Early-stage tech startups, Series A and B"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
    UpdateStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [pending, approved, rejected]
    FundingRequest:
      type: object
      properties:
        id:
          type: string
        businessId:
          type: string
        businessOwnerId:
          type: string
        title:
          type: string
        description:
          type: string
        amountRequested:
          type: number
        status:
          type: string
        offers:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    FundingOffer:
      type: object
      properties:
        id:
          type: string
        fundingEntityId:
          type: string
        fundingRequestId:
          type: string
        businessId:
          type: string
        amountOffered:
          type: number
        terms:
          type: string
        status:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    OfferResponse:
      type: object
      properties:
        status:
          type: string
          enum: [accepted, rejected]
    Business:
      type: object
      properties:
        id:
          type: string
        ownerId:
          type: string
        name:
          type: string
        description:
          type: string
        industry:
          type: string
        location:
          type: string
        fundingRequests:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    CommunityPost:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        content:
          type: string
        media:
          type: array
          items:
            type: string
        reactions:
          type: array
          items:
            type: string
        comments:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    CommunityComment:
      type: object
      properties:
        id:
          type: string
        postId:
          type: string
        userId:
          type: string
        content:
          type: string
        createdAt:
          type: string
    CommunityReaction:
      type: object
      properties:
        id:
          type: string
        postId:
          type: string
        userId:
          type: string
        type:
          type: string
        createdAt:
          type: string
    JobPosting:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        title:
          type: string
        description:
          type: string
        requirements:
          type: array
          items:
            type: string
        applicants:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    Chat:
      type: object
      properties:
        id:
          type: string
        participants:
          type: array
          items:
            type: string
        type:
          type: string
          enum: [direct, group]
        name:
          type: string
        description:
          type: string
        createdBy:
          type: string
        admins:
          type: array
          items:
            type: string
        lastMessage:
          $ref: '#/components/schemas/Message'
        unreadCounts:
          type: object
          additionalProperties:
            type: integer
        pinned:
          type: boolean
        muted:
          type: object
          additionalProperties:
            type: boolean
        archived:
          type: object
          additionalProperties:
            type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
    Message:
      type: object
      properties:
        id:
          type: string
        conversationId:
          type: string
        senderId:
          type: string
        content:
          type: string
        type:
          type: string
          enum: [text, image, file]
        fileUrl:
          type: string
        fileName:
          type: string
        fileType:
          type: string
        fileSize:
          type: integer
        edited:
          type: boolean
        editedAt:
          type: string
        deleted:
          type: boolean
        deletedAt:
          type: string
        reactions:
          type: object
          additionalProperties:
            type: string
        readBy:
          type: array
          items:
            type: string
        createdAt:
          type: string
    CreateChatRequest:
      type: object
      required:
        - participants
      properties:
        participants:
          type: array
          items:
            type: string
        type:
          type: string
          enum: [direct, group]
        name:
          type: string
        description:
          type: string
    SendMessageRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
        type:
          type: string
          enum: [text, image, file]
        fileUrl:
          type: string
        fileName:
          type: string
        fileType:
          type: string
        fileSize:
          type: integer
    EditMessageRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
    ReactionRequest:
      type: object
      required:
        - reaction
      properties:
        reaction:
          type: string
    ChatSettingsRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        pinned:
          type: boolean
        muted:
          type: boolean
        archived:
          type: boolean
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
  /api/auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
  /api/auth/profile:
    get:
      summary: Get user profile
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    patch:
      summary: Update user profile
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /api/auth/users:
    get:
      summary: Get all users (admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
  /api/auth/users/{userId}/status:
    patch:
      summary: Update user status (admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusRequest'
      responses:
        '200':
          description: User status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
  /api/auth/logout:
    post:
      summary: Logout user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized or already logged out
  /api/auth/update-profile:
    put:
      summary: Update user profile (full update)
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /api/admin/approve-user/{userId}:
    post:
      summary: Approve user registration (admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
  /api/business/request-funding:
    post:
      summary: Create a funding request
      tags: [Business]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FundingRequest'
      responses:
        '201':
          description: Funding request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
        '400':
          description: Invalid input data
  /api/business/dashboard:
    get:
      summary: Get business dashboard analytics
      tags: [Business]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: businessId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Business dashboard analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalRequested:
                    type: number
                  totalOffers:
                    type: number
                  acceptedOffers:
                    type: number
                  totalFunded:
                    type: number
                  requests:
                    type: array
                    items:
                      $ref: '#/components/schemas/FundingRequest'
                  offers:
                    type: array
                    items:
                      $ref: '#/components/schemas/FundingOffer'
  /api/business/funding-offers:
    get:
      summary: Get all funding offers for a business
      tags: [Business]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: businessId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of funding offers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FundingOffer'
  /api/business/all:
    get:
      summary: Get all businesses
      tags: [Business]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of businesses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Business'
  /api/business/funding-offers/{offerId}/respond:
    post:
      summary: Accept or reject a funding offer
      tags: [Business]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: offerId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferResponse'
      responses:
        '200':
          description: Offer response updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/funding-entities/dashboard:
    get:
      summary: Get funding entity dashboard analytics
      tags: [FundingEntity]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: fundingEntityId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Funding entity dashboard analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalOffers:
                    type: number
                  acceptedOffers:
                    type: number
                  rejectedOffers:
                    type: number
                  totalInvested:
                    type: number
                  offers:
                    type: array
                    items:
                      $ref: '#/components/schemas/FundingOffer'
  /api/businesses/investment-requests:
    get:
      summary: Get all businesses seeking investment
      tags: [FundingEntity]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of funding requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FundingRequest'
  /api/funding-entities/offer:
    post:
      summary: Submit a funding offer
      tags: [FundingEntity]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FundingOffer'
      responses:
        '201':
          description: Funding offer submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
        '400':
          description: Invalid input data
  /api/funding-entities/all:
    get:
      summary: Get all funding entities
      tags: [FundingEntity]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of funding entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/admin/pending-approvals:
    get:
      summary: Get all users pending approval
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            maximum: 50
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: List of pending users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    - id: "user123"
                      email: "pendinguser@example.com"
                      firstName: "Pending"
                      lastName: "User"
                      status: "pending"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/admin/approve-user/{id}:
    post:
      summary: Approve or reject a user
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [approved, rejected]
            example:
              status: "approved"
      responses:
        '200':
          description: User status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "User approved"
        '400':
          description: Invalid status
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/admin/analytics:
    get:
      summary: Get platform analytics
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Platform analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                  totalBusinesses:
                    type: integer
                  totalFundingRequests:
                    type: integer
                  totalFundingOffers:
                    type: integer
                  totalCommunityPosts:
                    type: integer
                  totalCommunityComments:
                    type: integer
                  totalJobPostings:
                    type: integer
              example:
                totalUsers: 100
                totalBusinesses: 20
                totalFundingRequests: 15
                totalFundingOffers: 30
                totalCommunityPosts: 50
                totalCommunityComments: 120
                totalJobPostings: 5
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/community/post:
    post:
      summary: Create a community post
      tags: [Community]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityPost'
            example:
              content: "Excited to launch our new product!"
              media: ["https://example.com/image.jpg"]
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
              example:
                message: "Post created"
                id: "post123"
        '400':
          description: Invalid input data
  /api/community/posts:
    get:
      summary: Fetch community posts
      tags: [Community]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            maximum: 50
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommunityPost'
              examples:
                example:
                  value:
                    - id: "post123"
                      userId: "user123"
                      content: "Excited to launch our new product!"
                      media: ["https://example.com/image.jpg"]
                      createdAt: "2024-06-01T12:00:00Z"
                      updatedAt: "2024-06-01T12:00:00Z"
        '401':
          description: Unauthorized
  /api/community/react:
    post:
      summary: React to a post
      tags: [Community]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityReaction'
            example:
              postId: "post123"
              type: "like"
      responses:
        '201':
          description: Reaction added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
              example:
                message: "Reaction added"
                id: "reaction123"
        '400':
          description: Invalid input data
  /api/community/comment:
    post:
      summary: Add a comment to a post
      tags: [Community]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityComment'
            example:
              postId: "post123"
              content: "Great job!"
      responses:
        '201':
          description: Comment added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
              example:
                message: "Comment added"
                id: "comment123"
        '400':
          description: Invalid input data
  /api/community/job:
    post:
      summary: Post a job offer
      tags: [Community]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPosting'
            example:
              title: "Frontend Developer"
              description: "Looking for a React.js developer."
              requirements: ["React.js", "CSS", "REST APIs"]
      responses:
        '201':
          description: Job posted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
              example:
                message: "Job posted"
                id: "job123"
        '400':
          description: Invalid input data
  /api/chats:
    post:
      summary: Create a new chat (direct or group)
      tags: [Chat]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatRequest'
      responses:
        '201':
          description: Chat created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '400':
          description: Invalid input data
    get:
      summary: Get user's chats
      tags: [Chat]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user's chats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
        '401':
          description: Unauthorized

  /api/chats/{chatId}/messages:
    get:
      summary: Get chat messages
      tags: [Chat]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
        - in: query
          name: before
          schema:
            type: string
            description: Message ID to paginate before
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized
    post:
      summary: Send a message
      tags: [Chat]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input data

  /api/chats/{chatId}/read:
    post:
      summary: Mark all messages as read
      tags: [Chat]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Messages marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized

  /api/chats/messages/{messageId}:
    put:
      summary: Edit a message
      tags: [Chat]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditMessageRequest'
      responses:
        '200':
          description: Message edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input data
    delete:
      summary: Delete a message
      tags: [Chat]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Message deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized

  /api/chats/messages/{messageId}/reactions:
    post:
      summary: Add reaction to a message
      tags: [Chat]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionRequest'
      responses:
        '200':
          description: Reaction added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input data
    delete:
      summary: Remove reaction from a message
      tags: [Chat]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reaction removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized

  /api/chats/{chatId}/settings:
    patch:
      summary: Update chat settings
      tags: [Chat]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatSettingsRequest'
      responses:
        '200':
          description: Chat updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '400':
          description: Invalid input data

  /api/chats/{chatId}:
    delete:
      summary: Delete a chat
      tags: [Chat]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Chat deleted
        '401':
          description: Unauthorized 

          # AI Endpoints Documentation for StartFlow API

paths:
  /api/ai/status:
    get:
      tags:
        - AI Status
      summary: Get comprehensive AI service status
      description: |
        Returns the complete status of the AI integration, including:
        - Backend service status
        - AI service health
        - Available AI features
        - Service configuration
      responses:
        '200':
          description: AI integration status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIStatusResponse'
              example:
                success: true
                data:
                  service: "StartFlow AI Integration"
                  backend:
                    status: "healthy"
                    port: 3000
                    environment: "development"
                  ai_service:
                    status: "healthy"
                    url: "http://localhost:8000"
                    health:
                      status: "healthy"
                      service: "StartFlow AI API"
                      version: "1.0.0"
                      modelsLoaded:
                        recommendation: true
                        startup_success: true
                        profit_prediction: true
                    info:
                      message: "Welcome to StartFlow AI API"
                      version: "1.0.0"
                      endpoints:
                        recommendations: "/ai/recommendations"
                        startup_success: "/ai/predict-startup-success"
                        profit_prediction: "/ai/predict-profit"
                  features:
                    recommendations: "Company recommendations based on industry"
                    startup_success: "Startup success probability prediction"
                    profit_prediction: "Profit prediction based on spending allocation"
                  timestamp: "2024-01-15T10:30:00.000Z"
        '503':
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "AI service is not responding"
                details: "Connection refused"

  /api/ai/health:
    get:
      tags:
        - AI Status
      summary: Check AI service health
      description: |
        Checks the health status of the AI service and returns:
        - Service status (healthy/unhealthy)
        - Service information
        - Model loading status
        - Version information
      responses:
        '200':
          description: AI service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIHealthStatus'
              example:
                success: true
                status: "healthy"
                data:
                  service: "StartFlow AI API"
                  version: "1.0.0"
                  modelsLoaded:
                    recommendation: true
                    startup_success: true
                    profit_prediction: true
                  timestamp: "2024-01-15T10:30:00.000Z"
        '503':
          description: AI service unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                status: "unhealthy"
                error: "AI service is not responding"
                details: "Connection timeout"

  /api/ai/info:
    get:
      tags:
        - AI Status
      summary: Get AI service information
      description: |
        Retrieves general information about the AI service including:
        - Service description
        - Available endpoints
        - Version information
        - Service capabilities
      responses:
        '200':
          description: AI service information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Welcome to StartFlow AI API"
                      version:
                        type: string
                        example: "1.0.0"
                      endpoints:
                        type: object
                        properties:
                          recommendations:
                            type: string
                            example: "/ai/recommendations"
                          startup_success:
                            type: string
                            example: "/ai/predict-startup-success"
                          profit_prediction:
                            type: string
                            example: "/ai/predict-profit"
                          health:
                            type: string
                            example: "/health"
                          docs:
                            type: string
                            example: "/docs"
                      timestamp:
                        type: string
                        format: date-time
                        example: "2024-01-15T10:30:00.000Z"
        '503':
          description: Unable to get AI service information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/recommendations:
    post:
      tags:
        - AI Recommendations
      summary: Get company recommendations based on industry
      description: |
        Uses AI-powered TF-IDF similarity to recommend companies based on industry input.
        
        **Features:**
        - Industry-based matching using TF-IDF vectorization
        - Cosine similarity scoring
        - Returns companies with funding and market size information
        - Configurable number of recommendations
        
        **Use Cases:**
        - Finding similar companies in the same industry
        - Market research and competitive analysis
        - Investment opportunity discovery
        - Partnership identification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndustryInput'
            example:
              industry: "Fintech"
              top_n: 6
      responses:
        '200':
          description: Company recommendations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsResponse'
              example:
                success: true
                message: "Found 6 recommendations for Fintech"
                data:
                  industry: "Fintech"
                  recommendations:
                    - Company Name: "Fawry"
                      Industry: "Digital Payments"
                      Funding Amount: "470 million"
                      Market Size: "Large"
                    - Company Name: "Paymob"
                      Industry: "Fintech"
                      Funding Amount: "846 million"
                      Market Size: "Large"
                    - Company Name: "Ebtikar"
                      Industry: "Fintech"
                      Funding Amount: "705 million"
                      Market Size: "Large"
                  count: 6
                  timestamp: "2024-01-15T10:30:00.000Z"
        '400':
          description: Invalid input provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Industry is required and must be a string"
        '503':
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "AI service is currently unavailable"
                details: "Connection refused"

  /api/ai/predict-startup-success:
    post:
      tags:
        - AI Predictions
      summary: Predict startup success probability
      description: |
        Uses machine learning to predict startup success probability based on various factors.
        
        **Model Features:**
        - Funding information and milestones
        - Investor backing and funding rounds
        - Geographic location indicators
        - Company age and development stage
        
        **Prediction Output:**
        - Success probability (0.0 to 1.0)
        - Risk level assessment (Low/Medium/High)
        - Confidence metrics
        - Interpretable results
        
        **Use Cases:**
        - Investment decision support
        - Risk assessment for funding entities
        - Startup evaluation and benchmarking
        - Strategic planning for business owners
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartupSuccessInput'
            example:
              funding_total_usd: 1000000
              milestones: 5
              has_VC: 1
              has_angel: 1
              has_roundA: 1
              has_roundB: 0
              has_roundC: 0
              has_roundD: 0
              avg_participants: 3.5
              is_CA: 1
              is_NY: 0
              is_MA: 0
              is_TX: 0
              is_otherstate: 0
              age_first_funding_years: 2.5
      responses:
        '200':
          description: Startup success prediction completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartupSuccessResponse'
              example:
                success: true
                message: "Startup success prediction completed"
                data:
                  prediction:
                    success_prediction: 1
                    success_probability: 0.85
                    failure_probability: 0.15
                  interpretation:
                    success_likely: true
                    confidence: 0.85
                    risk_level: "Low"
                  timestamp: "2024-01-15T10:30:00.000Z"
        '400':
          description: Invalid input or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Missing required fields: milestones, has_VC, has_angel"
        '503':
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "AI service is currently unavailable"
                details: "Model loading failed"

  /api/ai/predict-profit:
    post:
      tags:
        - AI Predictions
      summary: Predict profit based on spending allocation
      description: |
        Uses linear regression to predict profit based on spending allocation across different categories.
        
        **Model Features:**
        - Research & Development spending
        - Administrative costs
        - Marketing and advertising expenses
        
        **Prediction Output:**
        - Predicted profit amount
        - Confidence level
        - Spending insights and recommendations
        - Cost breakdown analysis
        
        **Use Cases:**
        - Financial planning and budgeting
        - Resource allocation optimization
        - ROI analysis for different spending categories
        - Business strategy development
        - Performance benchmarking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfitPredictionInput'
            example:
              RnD_Spend: 500000
              Administration: 200000
              Marketing_Spend: 300000
      responses:
        '200':
          description: Profit prediction completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfitPredictionResponse'
              example:
                success: true
                message: "Profit prediction completed"
                data:
                  prediction:
                    predicted_profit: 750000
                    confidence: 0.85
                    currency: "USD"
                  insights:
                    total_spending: 1000000
                    spending_breakdown:
                      rnd_percentage: 50.0
                      admin_percentage: 20.0
                      marketing_percentage: 30.0
                    recommendations:
                      - "Consider increasing R&D spending for better innovation potential"
                  timestamp: "2024-01-15T10:30:00.000Z"
        '400':
          description: Invalid input or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "Missing required fields: RnD_Spend, Administration, Marketing_Spend"
        '503':
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error: "AI service is currently unavailable"
                details: "Model prediction failed"

# AI Schemas
components:
  schemas:
    IndustryInput:
      type: object
      required:
        - industry
      properties:
        industry:
          type: string
          description: Industry to get recommendations for
          example: "Fintech"
          minLength: 1
          maxLength: 100
        top_n:
          type: integer
          description: Number of recommendations to return
          minimum: 1
          maximum: 20
          default: 6
          example: 6
    
    StartupSuccessInput:
      type: object
      required:
        - funding_total_usd
        - milestones
        - has_VC
        - has_angel
        - has_roundA
        - has_roundB
        - has_roundC
        - has_roundD
        - avg_participants
        - is_CA
        - is_NY
        - is_MA
        - is_TX
        - is_otherstate
        - age_first_funding_years
      properties:
        funding_total_usd:
          type: number
          description: Total funding in USD
          minimum: 0
          example: 1000000
        milestones:
          type: integer
          description: Number of milestones achieved
          minimum: 0
          maximum: 100
          example: 5
        has_VC:
          type: integer
          enum: [0, 1]
          description: Has venture capital backing (0 = No, 1 = Yes)
          example: 1
        has_angel:
          type: integer
          enum: [0, 1]
          description: Has angel investor backing (0 = No, 1 = Yes)
          example: 1
        has_roundA:
          type: integer
          enum: [0, 1]
          description: Has completed Series A (0 = No, 1 = Yes)
          example: 1
        has_roundB:
          type: integer
          enum: [0, 1]
          description: Has completed Series B (0 = No, 1 = Yes)
          example: 0
        has_roundC:
          type: integer
          enum: [0, 1]
          description: Has completed Series C (0 = No, 1 = Yes)
          example: 0
        has_roundD:
          type: integer
          enum: [0, 1]
          description: Has completed Series D (0 = No, 1 = Yes)
          example: 0
        avg_participants:
          type: number
          description: Average number of participants in funding rounds
          minimum: 0
          maximum: 50
          example: 3.5
        is_CA:
          type: integer
          enum: [0, 1]
          description: Is located in California (0 = No, 1 = Yes)
          example: 1
        is_NY:
          type: integer
          enum: [0, 1]
          description: Is located in New York (0 = No, 1 = Yes)
          example: 0
        is_MA:
          type: integer
          enum: [0, 1]
          description: Is located in Massachusetts (0 = No, 1 = Yes)
          example: 0
        is_TX:
          type: integer
          enum: [0, 1]
          description: Is located in Texas (0 = No, 1 = Yes)
          example: 0
        is_otherstate:
          type: integer
          enum: [0, 1]
          description: Is located in other states (0 = No, 1 = Yes)
          example: 0
        age_first_funding_years:
          type: number
          description: Age at first funding in years
          minimum: 0
          maximum: 50
          example: 2.5
    
    ProfitPredictionInput:
      type: object
      required:
        - RnD_Spend
        - Administration
        - Marketing_Spend
      properties:
        RnD_Spend:
          type: number
          description: Research and Development spending in USD
          minimum: 0
          example: 500000
        Administration:
          type: number
          description: Administrative spending in USD
          minimum: 0
          example: 200000
        Marketing_Spend:
          type: number
          description: Marketing spending in USD
          minimum: 0
          example: 300000
    
    CompanyRecommendation:
      type: object
      properties:
        Company Name:
          type: string
          description: Name of the recommended company
          example: "Fawry"
        Industry:
          type: string
          description: Industry of the company
          example: "Digital Payments"
        Funding Amount:
          type: string
          description: Total funding amount
          example: "470 million"
        Market Size:
          type: string
          description: Market size category
          enum: [Small, Medium, Large]
          example: "Large"
    
    RecommendationsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Found 6 recommendations for Fintech"
        data:
          type: object
          properties:
            industry:
              type: string
              example: "Fintech"
            recommendations:
              type: array
              items:
                $ref: '#/components/schemas/CompanyRecommendation'
            count:
              type: integer
              example: 6
            timestamp:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00.000Z"
    
    StartupSuccessPrediction:
      type: object
      properties:
        success_prediction:
          type: integer
          enum: [0, 1]
          description: "0 = Likely to fail, 1 = Likely to succeed"
          example: 1
        success_probability:
          type: number
          minimum: 0
          maximum: 1
          description: Probability of success (0.0 to 1.0)
          example: 0.85
        failure_probability:
          type: number
          minimum: 0
          maximum: 1
          description: Probability of failure (0.0 to 1.0)
          example: 0.15
    
    StartupSuccessInterpretation:
      type: object
      properties:
        success_likely:
          type: boolean
          description: Whether success is likely based on prediction
          example: true
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Confidence level of the prediction
          example: 0.85
        risk_level:
          type: string
          enum: [Low, Medium, High]
          description: Risk level assessment
          example: "Low"
    
    StartupSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Startup success prediction completed"
        data:
          type: object
          properties:
            prediction:
              $ref: '#/components/schemas/StartupSuccessPrediction'
            interpretation:
              $ref: '#/components/schemas/StartupSuccessInterpretation'
            timestamp:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00.000Z"
    
    ProfitPrediction:
      type: object
      properties:
        predicted_profit:
          type: number
          description: Predicted profit in USD
          example: 750000
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Confidence level of the prediction
          example: 0.85
        currency:
          type: string
          description: Currency of the prediction
          example: "USD"
    
    SpendingInsights:
      type: object
      properties:
        total_spending:
          type: number
          description: Total spending amount
          example: 1000000
        spending_breakdown:
          type: object
          properties:
            rnd_percentage:
              type: number
              description: Percentage spent on R&D
              example: 50.0
            admin_percentage:
              type: number
              description: Percentage spent on administration
              example: 20.0
            marketing_percentage:
              type: number
              description: Percentage spent on marketing
              example: 30.0
        recommendations:
          type: array
          items:
            type: string
          description: Spending optimization recommendations
          example: ["Consider increasing R&D spending for better innovation potential"]
    
    ProfitPredictionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Profit prediction completed"
        data:
          type: object
          properties:
            prediction:
              $ref: '#/components/schemas/ProfitPrediction'
            insights:
              $ref: '#/components/schemas/SpendingInsights'
            timestamp:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00.000Z"
    
    AIHealthStatus:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: string
          enum: [healthy, unhealthy]
          example: "healthy"
        data:
          type: object
          properties:
            service:
              type: string
              example: "StartFlow AI API"
            version:
              type: string
              example: "1.0.0"
            modelsLoaded:
              type: object
              properties:
                recommendation:
                  type: boolean
                  example: true
                startup_success:
                  type: boolean
                  example: true
                profit_prediction:
                  type: boolean
                  example: true
            timestamp:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00.000Z"
    
    AIStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            service:
              type: string
              example: "StartFlow AI Integration"
            backend:
              type: object
              properties:
                status:
                  type: string
                  example: "healthy"
                port:
                  type: integer
                  example: 3000
                environment:
                  type: string
                  example: "development"
            ai_service:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, unhealthy]
                  example: "healthy"
                url:
                  type: string
                  example: "http://localhost:8000"
                health:
                  type: object
                info:
                  type: object
            features:
              type: object
              properties:
                recommendations:
                  type: string
                  example: "Company recommendations based on industry"
                startup_success:
                  type: string
                  example: "Startup success probability prediction"
                profit_prediction:
                  type: string
                  example: "Profit prediction based on spending allocation"
            timestamp:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00.000Z"
    
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
          example: "Invalid input provided"
        details:
          type: string
          description: Additional error details (optional)
          example: "Connection refused" 